var MongoClient = require('mongodb').MongoClient,
    ejs = require('ejs'),
    fs = require('fs'),
    uuid = require('node-uuid'),
    mongodbURL = 'mongodb://localhost:27017/test';

//console.log(require('.／./package.json'));
var connectAndExc= function (callback) {
    MongoClient.connect('mongodb://localhost:27017/test', function(err, db) {
        var collectionUser = db.collection('user');
        callback(collectionUser,db);
    });
};

function EgooMongoClient(){

}

EgooMongoClient.prototype.validLogin = validLogin;
//登陆验证
var validLogin = function (userInfo, res) {
    //console.log(userInfo);
    connectAndExc(function (collectionUser,db) {
        collectionUser.find(userInfo).toArray(function (err,items) {
            if(err) throw err;
            //console.log(items);
            if(items.length === 0){
                res.send(JSON.stringify({result:false}));
            }else{
                indexejs = fs.readFileSync('./views/egoosocket.html', 'utf8');
                var index = ejs.render(indexejs,{"user":items[0]});
                res.writeHead(200, {'Content-type' : 'text/html'});
                res.write(index);
                res.end();
            }
            db.close();
        });
    });
};
/*
* 对应临时socketid
* userinfo
* {
*   "userid":"",
*   "tempsocketid":""
* }
* */
var mapTempSocketid = function (userinfo,res) {
    connectAndExc(function (collectionUser,db) {
        collectionUser.updateOne({"userid":userinfo.userid},{$set:{"tempsocketid":userinfo.tempsocketid}}, function (err,result) {
            if(err) throw err;
            db.close();
            var _result = {"mapTempResult":false};
            if(result.result.nModified > 0){
                _result.mapTempResult = true;
            }
            if(res){
                res.send(JSON.stringify(_result));
            }
        });
    });
};
/*
 * 清除对应socketid
 * { value:
 { _id: 561e144eb564ee9708fb28e6,
 userid: 'admin',
 username: 'admin',
 password: '1',
 tempsocketid: '' },
 lastErrorObject: { updatedExisting: true, n: 1 },
 ok: 1 }
 * */
var clearTempSocketid = function (socketid) {
    connectAndExc(function (collectionUser,db) {
        collectionUser.findAndModify({"tempsocketid":socketid},[],{$set:{"tempsocketid":""}},{new:true}, function (err,result) {
            if(err) throw err;
            db.close();
            //console.log(result);
            if(!result.value){
                console.log('清除socketid失败!');
            }
        });
    });
};

/*
*获取用户userid
* */
var getUseridBySocketid = function (socketid,res) {
    connectAndExc(function (collectionUser,db) {
        collectionUser.find(socketid).toArray(function (err,result) {
            if(err) throw err;
            //console.log(result);
            if(result.length !== 0){
                db.close();
                res.send(JSON.stringify({"username":result[0].username,"userid":result[0].userid,"tempsocketid":socketid.tempsocketid}));
            }else{
                setTimeout(function () {
                    collectionUser.find(socketid).toArray(function (err,result) {
                        if(err) throw err;
                        db.close();
                        if(result.length !== 0){
                            res.send(JSON.stringify({"username":result[0].username,"userid":result[0].userid,"tempsocketid":socketid.tempsocketid}));
                        }else{
                            res.send(JSON.stringify({"username":"","userid":"","tempsocketid":socketid.tempsocketid}));
                        }
                    });
                },1000);
            }
        });
    });
};

/*
*incomingdata
* {
*   inconfirm:true/false,
*   userid:"",
*   touserid : "",
*   msguuid:"",
*   msgdatatime:"",
*   msgcontent:"",
*
*
* }
* */
var recordSendMsg = function (incomingdata,res) {
    //查询是否存在该聊天纪录
    connectAndExc(function (collections, db) {
        var query = {
            "userid":incomingdata.userid
        };
        var msgsString = '{ "msgs.'+incomingdata.touserid+'" : true }';
        var suppression = JSON.parse(msgsString);
        collections.find(query,suppression).toArray(function (err,result) {
            if(err) throw err;
            //console.log();
            //[ { _id: 561e144eb564ee9708fb28e7, msgs: { gengyuchen: '1' } } ]

            //如果不存在该聊天纪录,创建
            if(result[0] && isEmptyObject(result[0].msgs)){
                var selector = {"userid":incomingdata.userid};
                var _uuid = uuid.v4();
                var msgobj = '{"msgs.'+incomingdata.touserid+'" : "'+_uuid+'"}';
                //console.log(msgobj);
                var document = {$set : JSON.parse(msgobj)};
                collections.update(selector,document,{'w':1}, function (err, result) {
                    if(err) throw err;
                    var msgscollections = db.collection('msg');
                    var insertmsguuid = JSON.parse('{"'+_uuid+'" : []}');
                    msgscollections.insertOne(insertmsguuid, {w:1}, function (err,_result) {
                        if(err) throw err;
                        //console.log('插入后');
                        //console.log(_result);
                    });
                });
            }else{
                var msgsuuid = result[0].msgs[incomingdata.touserid];
                console.log('存在');
                console.log(msgsuuid);
            }
        });
    });
};

/*
 *
 * */
var confirmSendMsg = function () {

};


/*
* util
* */
function isEmptyObject(obj){
    for(var name in obj ){
        if(obj.hasOwnProperty(name)){
            return false;
        }
    }
    return true;
}

/**
 * insertCollection
 * @type {Function}
 * @param insertObj
 * {
        noticationuuid: '',
        datetime: '',
        title:'',
        content: '',
        confirms:[{'':false},{'':false},{'':false}....]
    }
 */
var insertCollection = function (collectionName,insertObj,res,callback) {
    if( typeof insertObj === 'object' && typeof collectionName === 'string' ){
        MongoClient.connect(mongodbURL, function(err, db) {
            if(err) throw err;

            var thisCollection = db.collection(collectionName);

            thisCollection.insertOne(insertObj, function (err, result) {
                if(err) throw err;
                //将uuid插入每个user下的unconfirm字段
                var userCollection = db.collection('user');
                for(var temp in insertObj.confirms){
                    var keyname;
                    for( keyname in insertObj.confirms[temp]){}
                    var filter = {'userid':keyname},
                        updater = {$push : {'notication.unconfirmed':insertObj.noticationuuid}};
                    userCollection.updateMany(filter,updater, function (err,result) {
                        if(err) throw err;
                        if(result && result.result.n > 0){
                            console.log('推送消息已更新到user下！');
                        };
                    });
                }

                //回调：推送
                if(result.result.n > 0){
                    if(callback && typeof callback === 'function' ){
                        for(var count in insertObj.confirms){
                            var keyname;
                            for(keyname in insertObj.confirms[count]){}
                            callback(keyname);
                            //console.log('keyname: '+keyname);
                        }
                    }
                    res.send(JSON.stringify({'uuid':insertObj.noticationuuid}));
                }
                setTimeout(function () {
                    db.close();
                },100);
            });
        });
    }
};

/**
 * 通过userid获取未读推送消息
 * @param userid
 * @param res
 */
var getUnreadsByUserid = function (userid, res) {
    MongoClient.connect(mongodbURL, function(err, db) {
        if(err) throw err;

        var userCollection = db.collection('user');
        var filter = {'userid' : userid};
        userCollection.find(filter).toArray(function (err, item) {
            //res.send(item[0].notication.unconfirmed);
            var sendnotications = [];
            //查询notication表
            if( item && item.length === 1 ){
                var noticationCollection = db.collection('notication');

                for( var i in item[0].notication.unconfirmed ){
                    var filter_notication = {'noticationuuid': item[0].notication.unconfirmed[i]};
                    noticationCollection.find(filter_notication).toArray(function (err, item) {
                        if( item && item.length === 1){
                            var temp_notication = {
                                noticationuuid: item[0].noticationuuid,
                                title: item[0].title,
                                noticationContent: item[0].content
                            };
                            sendnotications.push(temp_notication);
                        }
                    });
                }
            }

            setTimeout(function () {
                db.close();
                res.send(sendnotications);
            },100);
        });
    });
};

/**
 * 更新 未读消息 至  已读消息
 * @param confirmdata
 * {userid:'',uuid:''}
 * @param res
 */
var updateUnreadByuserid = function (confirmdata, res) {
    if( typeof confirmdata === 'object' ){
        MongoClient.connect(mongodbURL, function(err, db) {
                if(err) throw err;

                var userCollection = db.collection('user');

                //删除存在的未读消息
                var filter = {userid:confirmdata.userid};
                var updaterPull = {$pull:{'notication.unconfirmed':confirmdata.uuid}};
                userCollection.updateMany(filter,updaterPull, function (err, result) {
                    if(err) throw err;
                    //console.log(result);
                    if(result && result.result.n > 0){
                        var updaterPush = {$push:{'notication.confirmed':confirmdata.uuid}};
                        //加入已读消息
                        userCollection.updateMany(filter,updaterPush, function (err, _result) {
                            if(err) throw err;

                            setTimeout(function () {
                                db.close();
                            },500);

                            res.send(200);
                        });
                    }
                });

            }
        );
    }
};

/**
 * 获取已读人员
 * @param uuid
 * @param res
 */
var findreadByuuid = function (uuid,res) {
    MongoClient.connect(mongodbURL, function(err, db) {

        var noticationCollection = db.collection('notication');

        var filter = {noticationuuid:uuid};
        noticationCollection.find(filter).limit(1).next(function (err, item) {
            if(err) throw err;
            //console.log(item.confirms);
            var keys = [];
            for(var i=0;i<item.confirms.length;i++){
                for(var keyname in item.confirms[i]){
                    keys.push(keyname);
                }
            }
            //
            var userCollection = db.collection('user');
            var filterUser = {'notication.confirmed':uuid};
            userCollection.find(filterUser).toArray(function (err, item) {
                if(err) throw err;
                //console.log(item);
                var resJson = [];
                for(var k=0;k<item.length;k++){
                    resJson.push(item[k].userid);
                }
                db.close();
                res.send(JSON.stringify(resJson));
            });
        });
    });
};



module.exports.validLogin = validLogin;
module.exports.mapTempSocketid = mapTempSocketid;
module.exports.clearTempSocketid = clearTempSocketid;
module.exports.getUseridBySocketid = getUseridBySocketid;
module.exports.recordSendMsg = recordSendMsg;
module.exports.confirmSendMsg = confirmSendMsg;
module.exports.insertCollection = insertCollection;
module.exports.getUnreadsByUserid = getUnreadsByUserid;
module.exports.updateUnreadByuserid = updateUnreadByuserid;
module.exports.findreadByuuid = findreadByuuid;
