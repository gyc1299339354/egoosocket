/**
 * Created by mac on 15/10/17.
 */
'use strict';
var uuid = require('node-uuid'),
    httputil = require('httpUtil'),
    egoomongodb = require('egoomongodb'),
    schedule = require('node-schedule'),
    JOBS;
//  "groupurl": "http://221.6.31.42:28080/SSIL/group.do?userid=jiangsudiaodu&json=1",
//  "messageurl":"http://221.6.31.42:28080/s2sh/message/message_queryAll?param=all"
/**
 * 定时任务
 * @param job
 * {
 *  noticationuuid:'',
 *  sendtime:''
 * }
 */
function ontimeNotication(job){
    //年、月份0-11、日、时、分、秒
    var date = new Date(job.sendtime[0],parseInt(job.sendtime[1])-1,job.sendtime[2],job.sendtime[3],job.sendtime[4],job.sendtime[5]);
    //var newdate = new Date(),
    //    date = newdate.setTime(parseInt(job.sendtime));
    console.log("新建任务，uuid＝"+job.noticationuuid);
    console.log("时间："+date);
    var j = schedule.scheduleJob(date, function(){
        console.log("执行推送任务，uuid＝"+job.noticationuuid);
        //获取延迟推送内容
        egoomongodb.getNoticationByuuid(job.noticationuuid,function(itemresult,db){
            //更新至对应的用户
            console.log('处理延迟推送消息');
            var userCollection = db.collection('user');

            for(var temp=0;temp<itemresult.confirms.length;temp++){
                var keyname;
                for( keyname in itemresult.confirms[temp]){}
                var filter = {'userid':keyname},
                    updater = {$push : {'notication.unconfirmed':itemresult.noticationuuid}};

                userCollection.updateMany(filter,updater, function (err,result) {
                    if(err) throw err;
                    if(result && result.result.n > 0){
                        httputil.postNitification(keyname);
                    };
                });
                if(temp === itemresult.confirms.length-1){
                    setTimeout(function () {
                        db.close();
                    },100);
                }
            }
        });
        j.cancel();
    });
}
//ontimeNotication({noticationuuid:1,sendtime:[2015,10,4,14,28,0]});

function Notication(){

}
Notication.prototype.delivery = function (rtc, msg) {
    rtc.emit('notication',msg);
}

/**
 *  消息推送主入口
 * @param incomingdata
 * {
 *  title:'',
 *  content:'',
 *  confirms:[{id:name},{id:name},{id:name}......],
 *  mobiles:['','','',.......],
	sendtime:''
 * }
 * @param res
 */
var insertAndpost = function (incomingdata ,res) {
    var tempinsertobj = {
        noticationuuid: uuid.v4(),
        datetime: new Date().getTime(),
        title:incomingdata.title,
        content: incomingdata.content,
        noticationwriter:incomingdata.noticationwriter,
        confirms: function () {
                var _confirms = '',i;
                for(i=0; i<incomingdata.confirms.length;i++){
                    var _key;
                    for(_key in incomingdata.confirms[i]){}
                    var tempstring = '"'+_key+'":{"isread":false,"name":"'+incomingdata.confirms[i][_key]+'"},';
                    _confirms += tempstring;
                }
                _confirms = '{'+_confirms.substring(0,_confirms.length-1)+'}';
            //console.log(_confirms);
            return JSON.parse(_confirms);
        }() };
    //是否存在短信发送
    if(incomingdata.mobiles && incomingdata.mobiles.length !== 0){
        tempinsertobj.mobiles = incomingdata.mobiles;
    }
    //是否延迟发送(是否存在sendtime)
    if(incomingdata.sendtime && incomingdata.sendtime.length !== 0){
        tempinsertobj.sendtime = incomingdata.sendtime;
        //延迟发送，添加至schedule队列
        egoomongodb.insertCollection('notication',tempinsertobj,res,ontimeNotication);
    }else{
        //即时发送
        egoomongodb.insertCollection('notication',tempinsertobj,res,httputil.postNitification);
    }

};

//
var getNoticationByUserid = function (userid,res) {
    egoomongodb.getUnreadsByUserid(userid,res);
};

/**
 * 确认已读推送消息
 * @param confirmdata
 * {userid:'',uuid:''}
 * @param res
 */
var confirmNotication = function (confirmdata, res,rtc) {
    egoomongodb.updateUnreadByuserid(confirmdata, res, rtc);
};

/**
 * 获取已读人员
 * @param uuid
 * @param res
 */
var getconfirmed = function (uuid, res) {
    egoomongodb.findreadByuuid(uuid,res);
};
/**
 * 获取群组
 * @param res
 */
var getgroup = function (userid,res) {
    httputil.getgroup(userid,res);
};
/**
 * 获取短息模版
 * @param res
 */
var getmessage = function (res) {
    httputil.getmessage(res);
};
/**
 * 获取用户的推送纪录
 * @param userid
 * @param res
 */
var getnotihistorybyuserid = function (userid, res) {
    egoomongodb.getNoticationHistoryByuserid(userid,res);
}

/**
 * 获取推送详情
 * @param uuid
 * @param res
 */
var getnoticationbyuuid = function (uuid, res) {
    egoomongodb.getNoticationByuuid(uuid, function (item, db) {
        res.send(item);
        db.close();
    });
}
var getbenoticationhistorybyuserid = function (uuid, res){
    egoomongodb.getBeNoticationHistoryByuserid(uuid, res)
};
/**
 * 对应临时notication socket id
 * @param comingdata
 * @param res
 */
var maptotempnoticationsocketid = function (comingdata, res) {
    egoomongodb.setTempNoticationSocketId(comingdata, res);
}

module.exports.notication = new Notication();
module.exports.insertAndpost = insertAndpost;
module.exports.getNoticationByUserid = getNoticationByUserid;
module.exports.confirmNotication = confirmNotication;
module.exports.getconfirmed = getconfirmed;
module.exports.getgroup = getgroup;
module.exports.getmessage = getmessage;
module.exports.getnotihistorybyuserid = getnotihistorybyuserid;
module.exports.getnoticationbyuuid = getnoticationbyuuid;
module.exports.maptotempnoticationsocketid=maptotempnoticationsocketid;
module.exports.getbenoticationhistorybyuserid = getbenoticationhistorybyuserid;